<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TwizzyIndy</title>
  
  <subtitle>sometimes a good guy but .. sometimes a bad one ..</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://TwizzyIndy.github.io/"/>
  <updated>2019-01-26T11:24:25.164Z</updated>
  <id>http://TwizzyIndy.github.io/</id>
  
  <author>
    <name>TwizzyIndy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sneaking into Huawei Bootloader And ATCMDSERVER</title>
    <link href="http://TwizzyIndy.github.io/2019/01/26/Sneaking-into-Huawei-Bootloader-And-ATCMDSERVER/"/>
    <id>http://TwizzyIndy.github.io/2019/01/26/Sneaking-into-Huawei-Bootloader-And-ATCMDSERVER/</id>
    <published>2019-01-26T07:57:06.000Z</published>
    <updated>2019-01-26T11:24:25.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sneaking-into-Huawei-Bootloader-amp-ATCMDSERVER-PART-I"><a href="#Sneaking-into-Huawei-Bootloader-amp-ATCMDSERVER-PART-I" class="headerlink" title="Sneaking into Huawei Bootloader &amp; ATCMDSERVER PART I"></a><strong>Sneaking into Huawei Bootloader &amp; ATCMDSERVER PART I</strong></h1><p>[ this article based and implemented on <a href="https://blog.csdn.net/autohacker/article/details/50715639" target="_blank" rel="noopener">Autohacker’s blog post on CSDN</a> ]</p><p><strong>Overview</strong><br>I found a post the post which was on CSDN on past three years ago.(yes its really old :( ). He gave us IDA Pro Database file to continuing analyzing for atcmdserver binary which existed in most of Hisilicon PoC based phones from Huawei. I kept reversing that binary since 2016.(but you should know im just a lazy reverse engineer.)</p><p><strong>What is atcmdserver and how it works?</strong><br>Huawei made that binary(located as /system/bin/atcmdserver) as a client which would do everything we sent AT commands from COM Port(Serial Port) and analyze them and output as programmed.</p><p>I guess (but its sure) Huawei made some authorized software which could do services like Changing Sales Region, Making Network Restrictions, Reading FRP Unlocking Keys, Reading Bootloader Unlock Codes, and much more…</p><p>First of all, that client softwares requesting authorize key from phone like this way. </p><p>“AT ^ CHECKAUTHORITY\r\n”<br><img src="media/15484909712505/img1.png" alt="img1"></p><p>replied 128Bytes (really convert 128bytes into hex string.. so output is exactly 256 string ) ..</p><p>Lets take a look how this number comes from ..</p><p>Just load his database in IDA Pro and find the string AT CHECKAUTHORITY.<br><img src="media/15484909712505/img2.png" alt="img2"></p><p>just find CHECKAUTHORITY so it would leads u to a global function<br><img src="media/15484909712505/img3.png" alt="img3"></p><p>the function located on 0x36514. Decompile it.<br><img src="media/15484909712505/img4.png" alt="img4"></p><p>in that function generate random 4 bytes from /dev/urandom and encrypt it using RSA-1020 (yes its 1020 bit) Bit Public Key. I pointed g_table that is a pointer to a factory public key including Modulus(N) and Exponent(E).<br>I think I need to explain how RSA Encryption works. RSA have two keys which are a public and a private. Encryption need just a public key but decryption doesnt. atcmdserver just encrypt random 4 bytes with Public Key and output the encrypted Big Integer array. So we have to decrypt them with Private Key and encrypt again with same private key and then send result to the phone via AT command as following :</p><p>AT ^ CONFORMAUTHORITY:8123884838348988…<br>reply: OKAY</p><p>we should take a look more in depth ..</p><p>decompile GenerateSeed function<br>it just put Random 4 bytes value into PKCS#1 1.5 Padding format.<br>the padded message would be like following ..</p><p>in hex<br>0001FFFFFFFF…FFFF00[generated random 4bytes]<br><img src="media/15484909712505/img5.png" alt="img5"></p><p>and then the put padded formatted array into RSAPublicBlock and get output value.</p><p><img src="media/15484909712505/img6.png" alt="img6"></p><p>My decompilation looks fine huh?<br>I found that they used RSARef Library when I tried to load the fastboot.img (you could extract it from firmware package UPDATE.APP or get from /dev/block/by-name/*/fastboot).</p><p>Look at the last bytes with ordinary hex editor.<br><img src="media/15484909712505/img7.png" alt="img7"></p><p>its strange .. take a look that in plaintext mode ..<br><img src="media/15484909712505/img8.png" alt="img8"></p><p>a symbol table of fastboot .. they generated it using nm (included in Android NDK Bundle) ..<br><img src="media/15484909712505/img9.png" alt="img9"><br><img src="media/15484909712505/img10.png" alt="img10"></p><p><img src="media/15484909712505/img11.png" alt="img11"></p><p>(we better reverse that binary in PART II)</p><p>get back to atcmdserver again ..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sneaking-into-Huawei-Bootloader-amp-ATCMDSERVER-PART-I&quot;&gt;&lt;a href=&quot;#Sneaking-into-Huawei-Bootloader-amp-ATCMDSERVER-PART-I&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="Huawei Bootloader" scheme="http://TwizzyIndy.github.io/tags/Huawei-Bootloader/"/>
    
  </entry>
  
  <entry>
    <title>About</title>
    <link href="http://TwizzyIndy.github.io/2016/11/01/About/"/>
    <id>http://TwizzyIndy.github.io/2016/11/01/About/</id>
    <published>2016-10-31T18:43:28.000Z</published>
    <updated>2018-02-07T09:13:02.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to my private blog.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="misc" scheme="http://TwizzyIndy.github.io/tags/misc/"/>
    
  </entry>
  
</feed>
